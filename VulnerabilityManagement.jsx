import React, { useState, useEffect } from "react";
import { VulnerabilityAssessment } from "@/api/entities";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { ShieldAlert, Activity, CheckCircle, Clock } from "lucide-react";

export default function VulnerabilityManagementPage() {
  const [assessments, setAssessments] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadAssessments();
  }, []);

  const loadAssessments = async () => {
    setIsLoading(true);
    const data = await VulnerabilityAssessment.list("-scan_date");
    setAssessments(data);
    setIsLoading(false);
  };
  
  const getSeverityColor = (severity) => {
    const colors = {
      critical: "bg-red-500/20 text-red-400",
      high: "bg-orange-500/20 text-orange-400",
      medium: "bg-yellow-500/20 text-yellow-400",
      low: "bg-blue-500/20 text-blue-400",
    };
    return colors[severity] || "bg-gray-500/20 text-gray-400";
  };

  const allVulnerabilities = assessments.flatMap(a => a.vulnerabilities_found || []);
  const summary = allVulnerabilities.reduce((acc, vuln) => {
      acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
      return acc;
  }, { critical: 0, high: 0, medium: 0, low: 0 });

  return (
    <div className="min-h-screen p-4 md:p-8" style={{background: 'var(--primary-bg)'}}>
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold text-white mb-6 flex items-center gap-3">
          <ShieldAlert className="w-8 h-8 text-orange-400" />
          Vulnerability Management
        </h1>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
            <Card className="border-gray-700 bg-red-900/30"><CardContent className="p-4"><div className="text-sm text-red-300">Critical</div><div className="text-3xl font-bold text-red-400">{summary.critical}</div></CardContent></Card>
            <Card className="border-gray-700 bg-orange-900/30"><CardContent className="p-4"><div className="text-sm text-orange-300">High</div><div className="text-3xl font-bold text-orange-400">{summary.high}</div></CardContent></Card>
            <Card className="border-gray-700 bg-yellow-900/30"><CardContent className="p-4"><div className="text-sm text-yellow-300">Medium</div><div className="text-3xl font-bold text-yellow-400">{summary.medium}</div></CardContent></Card>
            <Card className="border-gray-700 bg-blue-900/30"><CardContent className="p-4"><div className="text-sm text-blue-300">Low</div><div className="text-3xl font-bold text-blue-400">{summary.low}</div></CardContent></Card>
        </div>

        <Card className="border-gray-700 bg-gray-800/50">
          <CardHeader><CardTitle className="text-white">Recent Vulnerability Assessments</CardTitle></CardHeader>
          <CardContent>
            <Table>
              <TableHeader><TableRow className="border-b-gray-700 hover:bg-transparent"><TableHead className="text-white">Target</TableHead><TableHead className="text-white">Scan Type</TableHead><TableHead className="text-white">Tool</TableHead><TableHead className="text-white">Vulnerabilities</TableHead><TableHead className="text-white">Date</TableHead><TableHead className="text-white">Status</TableHead></TableRow></TableHeader>
              <TableBody>
                {isLoading ? <TableRow><TableCell colSpan="6" className="text-center text-white">Loading...</TableCell></TableRow> :
                  assessments.map(scan => (
                    <TableRow key={scan.id} className="border-b-gray-800 hover:bg-gray-900/50">
                      <TableCell className="font-medium text-white">{scan.target}</TableCell>
                      <TableCell>{scan.scan_type}</TableCell>
                      <TableCell>{scan.tool_used}</TableCell>
                      <TableCell>
                        <div className="flex gap-2">
                          <Badge className={getSeverityColor('critical')}>{scan.summary.critical_count}</Badge>
                          <Badge className={getSeverityColor('high')}>{scan.summary.high_count}</Badge>
                          <Badge className={getSeverityColor('medium')}>{scan.summary.medium_count}</Badge>
                        </div>
                      </TableCell>
                      <TableCell>{new Date(scan.scan_date).toLocaleDateString()}</TableCell>
                      <TableCell><Badge className="bg-green-500/20 text-green-400">{scan.status}</Badge></TableCell>
                    </TableRow>
                  ))
                }
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}